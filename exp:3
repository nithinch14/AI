from collections import deque

def water_jug_problem(x, y, z):
    # x = capacity of jug 1
    # y = capacity of jug 2
    # z = target amount

    visited = set()
    queue = deque([(0, 0, [])])  # (a, b, steps)

    while queue:
        a, b, steps = queue.popleft()

        if (a, b) in visited:
            continue
        visited.add((a, b))

        # If we reach the target
        if a == z or b == z:
            return steps

        # Operations
        queue.append((x, b, steps + ['fill jug 1']))
        queue.append((a, y, steps + ['fill jug 2']))
        queue.append((0, b, steps + ['empty jug 1']))
        queue.append((a, 0, steps + ['empty jug 2']))

        # Pour jug 1 into jug 2
        amount = min(a, y - b)
        queue.append((a - amount, b + amount, steps + ['pour jug 1 into jug 2']))

        # Pour jug 2 into jug 1
        amount = min(x - a, b)
        queue.append((a + amount, b - amount, steps + ['pour jug 2 into jug 1']))

    return None


# Example usage
steps = water_jug_problem(4, 3, 2)
if steps:
    print("\n".join(steps))
else:
    print("No solution found.")
output:
pour jug 2 into jug 1
